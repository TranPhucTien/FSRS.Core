name: Advanced NuGet Workflow

on:
    push:
        branches: [main, develop]
        tags: ['v*.*.*']
    pull_request:
        branches: [main]

env:
    DOTNET_VERSION: '8.0.x'

jobs:
    # Job 1: Build và Test
    build-and-test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

            - name: Restore
              run: dotnet restore

            - name: Build
              run: dotnet build --configuration Release --no-restore

            - name: Test
              run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage"

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: TestResults/

    # Job 2: Publish (chỉ khi có tag)
    publish:
        needs: build-and-test
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/v')

        environment: production # Sử dụng environment protection

        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Extract version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Update version in project file
              run: |
                  sed -i "s|<Version>.*</Version>|<Version>${{ steps.version.outputs.VERSION }}</Version>|" src/FSRS.Core/FSRS.Core.csproj

            - name: Restore and Build
              run: |
                  dotnet restore
                  dotnet build --configuration Release --no-restore

            - name: Pack
              run: dotnet pack --configuration Release --no-build --output ./nupkg

            - name: Publish to NuGet
              run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source nuget.org --skip-duplicate

            - name: Create GitHub Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ steps.version.outputs.VERSION }}
                  draft: false
                  prerelease: false
