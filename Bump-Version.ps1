<#
.SYNOPSIS
    Qu·∫£n l√Ω version cho NuGet package

.DESCRIPTION
    Script PowerShell ƒë·ªÉ bump version theo Semantic Versioning (SemVer)
    H·ªó tr·ª£: major, minor, patch, alpha, beta, rc, release

.PARAMETER Type
    Lo·∫°i version bump: major, minor, patch, alpha, beta, rc, release

.PARAMETER ProjectFile
    ƒê∆∞·ªùng d·∫´n t·ªõi file .csproj (m·∫∑c ƒë·ªãnh: src/FSRS.Core/FSRS.Core.csproj)

.EXAMPLE
    .\Bump-Version.ps1 -Type patch
    .\Bump-Version.ps1 -Type minor
    .\Bump-Version.ps1 -Type alpha

.NOTES
    T√°c gi·∫£: TranPhucTien
    Ng√†y t·∫°o: 2025-05-26
#>

param(
    [Parameter(Mandatory=$true, HelpMessage="Ch·ªçn lo·∫°i version bump")]
    [ValidateSet("major", "minor", "patch", "alpha", "beta", "rc", "release")]
    [string]$Type,
    
    [Parameter(Mandatory=$false)]
    [string]$ProjectFile = "src\FSRS.Core\FSRS.Core.csproj",
    
    [Parameter(Mandatory=$false)]
    [switch]$Force,
    
    [Parameter(Mandatory=$false)]
    [switch]$NoChangelog
)

# üé® Colors for output
$Colors = @{
    Red = "Red"
    Green = "Green"
    Yellow = "Yellow"
    Blue = "Cyan"
    Purple = "Magenta"
    White = "White"
    Gray = "Gray"
}

# üìù Function ƒë·ªÉ vi·∫øt output c√≥ m√†u
function Write-ColoredOutput {
    param(
        [string]$Message,
        [string]$Color = "White",
        [switch]$NoNewline
    )
    
    if ($NoNewline) {
        Write-Host $Message -ForegroundColor $Color -NoNewline
    } else {
        Write-Host $Message -ForegroundColor $Color
    }
}

# üéØ Function hi·ªÉn th·ªã banner
function Show-Banner {
    Write-ColoredOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" $Colors.Blue
    Write-ColoredOutput "‚ïë          üöÄ Version Manager            ‚ïë" $Colors.Blue
    Write-ColoredOutput "‚ïë       Semantic Versioning Tool        ‚ïë" $Colors.Blue
    Write-ColoredOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" $Colors.Blue
    Write-ColoredOutput ""
}

# üîç Function ki·ªÉm tra dependencies
function Test-Dependencies {
    Write-ColoredOutput "üîç Checking dependencies..." $Colors.Blue
    
    # Ki·ªÉm tra Git
    try {
        $null = Get-Command git -ErrorAction Stop
        Write-ColoredOutput "‚úÖ Git: Found" $Colors.Green
    } catch {
        Write-ColoredOutput "‚ùå Git: Not found" $Colors.Red
        Write-ColoredOutput "üí° Please install Git: https://git-scm.com/download/win" $Colors.Yellow
        exit 1
    }
    
    # Ki·ªÉm tra ƒëang trong Git repository
    try {
        $null = git rev-parse --git-dir 2>$null
        Write-ColoredOutput "‚úÖ Git Repository: Valid" $Colors.Green
    } catch {
        Write-ColoredOutput "‚ùå Not in a Git repository" $Colors.Red
        exit 1
    }
    
    # Ki·ªÉm tra uncommitted changes
    $gitStatus = git status --porcelain
    if ($gitStatus) {
        Write-ColoredOutput "‚ö†Ô∏è  Warning: You have uncommitted changes" $Colors.Yellow
        Write-ColoredOutput $gitStatus $Colors.Gray
        
        if (-not $Force) {
            $response = Read-Host "Continue anyway? (y/N)"
            if ($response -ne "y" -and $response -ne "Y") {
                Write-ColoredOutput "‚èπÔ∏è  Operation cancelled" $Colors.Yellow
                exit 0
            }
        }
    }
    
    Write-ColoredOutput "‚úÖ Dependencies check passed" $Colors.Green
    Write-ColoredOutput ""
}

# üìã Function hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
function Show-CurrentStatus {
    Write-ColoredOutput "üìã Current Status:" $Colors.Blue
    
    $currentDir = Split-Path -Leaf (Get-Location)
    $currentBranch = git branch --show-current
    $lastCommit = git log -1 --pretty=format:"%h - %s (%cr)" 2>$null
    
    Write-ColoredOutput "  üìÇ Project: " $Colors.Gray -NoNewline
    Write-ColoredOutput $currentDir $Colors.White
    
    Write-ColoredOutput "  üåø Branch: " $Colors.Gray -NoNewline
    Write-ColoredOutput $currentBranch $Colors.White
    
    Write-ColoredOutput "  üìù Last commit: " $Colors.Gray -NoNewline
    Write-ColoredOutput $lastCommit $Colors.White
    
    Write-ColoredOutput "  üì¶ Project file: " $Colors.Gray -NoNewline
    Write-ColoredOutput $ProjectFile $Colors.White
    
    Write-ColoredOutput ""
}

# üîç Function ki·ªÉm tra project file
function Test-ProjectFile {
    if (-not (Test-Path $ProjectFile)) {
        Write-ColoredOutput "‚ùå Project file not found: $ProjectFile" $Colors.Red
        
        Write-ColoredOutput "üí° Available .csproj files:" $Colors.Yellow
        Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 5 | ForEach-Object {
            Write-ColoredOutput "   $($_.FullName)" $Colors.Gray
        }
        
        exit 1
    }
    
    Write-ColoredOutput "‚úÖ Project file found" $Colors.Green
}

# üìñ Function ƒë·ªçc version hi·ªán t·∫°i
function Get-CurrentVersion {
    $projectContent = Get-Content $ProjectFile -Raw
    
    # T√¨m Version tag
    $versionMatch = [regex]::Match($projectContent, '<Version>([^<]+)</Version>')
    
    if ($versionMatch.Success) {
        $script:CurrentVersion = $versionMatch.Groups[1].Value
        Write-ColoredOutput "üì¶ Current version: " $Colors.Blue -NoNewline
        Write-ColoredOutput $script:CurrentVersion $Colors.Green
        return
    }
    
    # Th·ª≠ t√¨m PackageVersion
    $packageVersionMatch = [regex]::Match($projectContent, '<PackageVersion>([^<]+)</PackageVersion>')
    if ($packageVersionMatch.Success) {
        $script:CurrentVersion = $packageVersionMatch.Groups[1].Value
        Write-ColoredOutput "üì¶ Found PackageVersion: " $Colors.Blue -NoNewline
        Write-ColoredOutput $script:CurrentVersion $Colors.Green
        return
    }
    
    # Th·ª≠ t√¨m VersionPrefix
    $versionPrefixMatch = [regex]::Match($projectContent, '<VersionPrefix>([^<]+)</VersionPrefix>')
    if ($versionPrefixMatch.Success) {
        $script:CurrentVersion = $versionPrefixMatch.Groups[1].Value
        Write-ColoredOutput "üì¶ Found VersionPrefix: " $Colors.Blue -NoNewline
        Write-ColoredOutput $script:CurrentVersion $Colors.Green
        return
    }
    
    Write-ColoredOutput "‚ùå No version found in project file" $Colors.Red
    Write-ColoredOutput "üí° Make sure your .csproj has <Version>1.0.0</Version> tag" $Colors.Yellow
    exit 1
}

# üßÆ Function ph√¢n t√≠ch version
function Parse-Version {
    # Ki·ªÉm tra pre-release
    $script:IsPrerelease = $script:CurrentVersion.Contains("-")
    
    if ($script:IsPrerelease) {
        $parts = $script:CurrentVersion.Split("-")
        $script:BaseVersion = $parts[0]
        $script:PrereleaseTag = $parts[1]
        Write-ColoredOutput "‚ö†Ô∏è  Pre-release version detected: " $Colors.Yellow -NoNewline
        Write-ColoredOutput $script:PrereleaseTag $Colors.Purple
    } else {
        $script:BaseVersion = $script:CurrentVersion
        $script:PrereleaseTag = ""
    }
    
    # Parse version numbers
    $versionParts = $script:BaseVersion.Split(".")
    
    if ($versionParts.Count -ne 3) {
        Write-ColoredOutput "‚ùå Invalid version format. Expected: MAJOR.MINOR.PATCH" $Colors.Red
        Write-ColoredOutput "Current: $script:CurrentVersion" $Colors.Gray
        exit 1
    }
    
    try {
        $script:Major = [int]$versionParts[0]
        $script:Minor = [int]$versionParts[1]
        $script:Patch = [int]$versionParts[2]
    } catch {
        Write-ColoredOutput "‚ùå Invalid version numbers" $Colors.Red
        exit 1
    }
    
    Write-ColoredOutput "üî¢ Version parts: " $Colors.Blue -NoNewline
    Write-ColoredOutput "Major=$script:Major, Minor=$script:Minor, Patch=$script:Patch" $Colors.White
}

# üéØ Function t√≠nh to√°n version m·ªõi
function Calculate-NewVersion {
    param([string]$BumpType)
    
    switch ($BumpType) {
        "major" {
            $script:Major++
            $script:Minor = 0
            $script:Patch = 0
            $script:NewVersion = "$script:Major.$script:Minor.$script:Patch"
            Write-ColoredOutput "üí• MAJOR version bump (Breaking changes)" $Colors.Red
        }
        "minor" {
            $script:Minor++
            $script:Patch = 0
            $script:NewVersion = "$script:Major.$script:Minor.$script:Patch"
            Write-ColoredOutput "‚ú® MINOR version bump (New features)" $Colors.Yellow
        }
        "patch" {
            $script:Patch++
            $script:NewVersion = "$script:Major.$script:Minor.$script:Patch"
            Write-ColoredOutput "üêõ PATCH version bump (Bug fixes)" $Colors.Green
        }
        "alpha" {
            if ($script:CurrentVersion -match "alpha\.(\d+)") {
                $alphaNum = [int]$matches[1] + 1
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch-alpha.$alphaNum"
            } else {
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch-alpha.1"
            }
            Write-ColoredOutput "üî¨ ALPHA pre-release" $Colors.Blue
        }
        "beta" {
            if ($script:CurrentVersion -match "beta\.(\d+)") {
                $betaNum = [int]$matches[1] + 1
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch-beta.$betaNum"
            } else {
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch-beta.1"
            }
            Write-ColoredOutput "üß™ BETA pre-release" $Colors.Blue
        }
        "rc" {
            if ($script:CurrentVersion -match "rc\.(\d+)") {
                $rcNum = [int]$matches[1] + 1
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch-rc.$rcNum"
            } else {
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch-rc.1"
            }
            Write-ColoredOutput "üöÄ RELEASE CANDIDATE" $Colors.Blue
        }
        "release" {
            if ($script:IsPrerelease) {
                $script:NewVersion = "$script:Major.$script:Minor.$script:Patch"
                Write-ColoredOutput "üéâ Converting pre-release to STABLE release" $Colors.Green
            } else {
                Write-ColoredOutput "‚ùå Current version is already a stable release" $Colors.Red
                exit 1
            }
        }
    }
    
    Write-ColoredOutput ""
    Write-ColoredOutput "üéØ New version: " $Colors.Green -NoNewline
    Write-ColoredOutput $script:NewVersion $Colors.Yellow
}

# ‚úèÔ∏è Function c·∫≠p nh·∫≠t version trong file
function Update-VersionInFile {
    param([string]$NewVersion)
    
    Write-ColoredOutput "üîÑ Updating version in project file..." $Colors.Yellow
    
    # T·∫°o backup
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "$ProjectFile.backup.$timestamp"
    Copy-Item $ProjectFile $backupFile
    Write-ColoredOutput "üíæ Backup created: $backupFile" $Colors.Blue
    
    # ƒê·ªçc n·ªôi dung file
    $projectContent = Get-Content $ProjectFile -Raw
    
    # Update Version tag
    $projectContent = $projectContent -replace '<Version>[^<]+</Version>', "<Version>$NewVersion</Version>"
    
    # Update AssemblyVersion n·∫øu c√≥
    if ($projectContent -match '<AssemblyVersion>') {
        $projectContent = $projectContent -replace '<AssemblyVersion>[^<]+</AssemblyVersion>', "<AssemblyVersion>$NewVersion.0</AssemblyVersion>"
    }
    
    # Update FileVersion n·∫øu c√≥
    if ($projectContent -match '<FileVersion>') {
        $projectContent = $projectContent -replace '<FileVersion>[^<]+</FileVersion>', "<FileVersion>$NewVersion.0</FileVersion>"
    }
    
    # Ghi l·∫°i file
    Set-Content $ProjectFile $projectContent -Encoding UTF8
    
    Write-ColoredOutput "‚úÖ Version updated successfully!" $Colors.Green
    
    # Hi·ªÉn th·ªã thay ƒë·ªïi
    Write-ColoredOutput ""
    Write-ColoredOutput "üìã Changes made:" $Colors.Blue
    Write-ColoredOutput "Before: " $Colors.Gray -NoNewline
    Write-ColoredOutput $script:CurrentVersion $Colors.Yellow
    Write-ColoredOutput "After:  " $Colors.Gray -NoNewline
    Write-ColoredOutput $NewVersion $Colors.Green
}

# üìù Function t·∫°o changelog entry
function New-ChangelogEntry {
    param(
        [string]$Version,
        [string]$BumpType
    )
    
    if ($NoChangelog) {
        Write-ColoredOutput "‚è≠Ô∏è  Skipping changelog creation" $Colors.Gray
        return
    }
    
    Write-ColoredOutput "üìù Creating changelog entry..." $Colors.Blue
    
    $changelogFile = "CHANGELOG.md"
    $currentDate = Get-Date -Format "yyyy-MM-dd"
    
    # T·∫°o CHANGELOG.md n·∫øu ch∆∞a c√≥
    if (-not (Test-Path $changelogFile)) {
        Write-ColoredOutput "üìÑ Creating new CHANGELOG.md" $Colors.Yellow
        
        $changelogHeader = @"
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"@
        Set-Content $changelogFile $changelogHeader -Encoding UTF8
    }
    
    # ƒê·ªçc changelog hi·ªán t·∫°i
    $existingContent = Get-Content $changelogFile -Raw
    
    # T·∫°o entry m·ªõi
    $newEntry = switch ($BumpType) {
        "major" {
            @"

## [$Version] - $currentDate

### üí• BREAKING CHANGES
- 

### ‚ú® New Features
- 

### üêõ Bug Fixes
- 

"@
        }
        "minor" {
            @"

## [$Version] - $currentDate

### ‚ú® New Features
- 

### üêõ Bug Fixes
- 

### üîß Improvements
- 

"@
        }
        "patch" {
            @"

## [$Version] - $currentDate

### üêõ Bug Fixes
- 

### üîß Improvements
- 

"@
        }
        default {
            @"

## [$Version] - $currentDate

### üöÄ Changes
- 

"@
        }
    }
    
    # Ch√®n entry m·ªõi v√†o ƒë·∫ßu changelog (sau header)
    $lines = $existingContent -split "`r?`n"
    $headerEndIndex = 5  # D√≤ng k·∫øt th√∫c c·ªßa header
    
    $newContent = ($lines[0..$headerEndIndex] -join "`n") + $newEntry + "`n" + ($lines[($headerEndIndex + 1)..($lines.Length - 1)] -join "`n")
    
    Set-Content $changelogFile $newContent -Encoding UTF8
    Write-ColoredOutput "‚úÖ Changelog entry created" $Colors.Green
}

# üéØ Function hi·ªÉn th·ªã next steps
function Show-NextSteps {
    param([string]$Version)
    
    Write-ColoredOutput ""
    Write-ColoredOutput "üéâ Version bump completed!" $Colors.Green
    Write-ColoredOutput ""
    Write-ColoredOutput "üìã Next steps:" $Colors.Blue
    Write-ColoredOutput "  1. Review changes:" $Colors.Gray
    Write-ColoredOutput "     git diff" $Colors.Yellow
    Write-ColoredOutput ""
    Write-ColoredOutput "  2. Commit changes:" $Colors.Gray
    Write-ColoredOutput "     git add ." $Colors.Yellow
    Write-ColoredOutput "     git commit -m `"Bump version to $Version`"" $Colors.Yellow
    Write-ColoredOutput ""
    Write-ColoredOutput "  3. Create and push tag:" $Colors.Gray
    Write-ColoredOutput "     git tag -a `"v$Version`" -m `"Release version $Version`"" $Colors.Yellow
    Write-ColoredOutput "     git push origin main" $Colors.Yellow
    Write-ColoredOutput "     git push origin `"v$Version`"" $Colors.Yellow
    Write-ColoredOutput ""
    Write-ColoredOutput "  4. GitHub Actions will automatically build and publish! üöÄ" $Colors.Green
}

# üöÄ MAIN EXECUTION
try {
    Show-Banner
    Show-CurrentStatus
    Test-Dependencies
    Test-ProjectFile
    Get-CurrentVersion
    Parse-Version
    Calculate-NewVersion $Type
    
    Write-ColoredOutput ""
    if (-not $Force) {
        $confirmation = Read-Host "Continue with version bump? (y/N)"
        if ($confirmation -ne "y" -and $confirmation -ne "Y") {
            Write-ColoredOutput "‚èπÔ∏è  Operation cancelled" $Colors.Yellow
            exit 0
        }
    }
    
    Update-VersionInFile $script:NewVersion
    
    # T·∫°o changelog entry ch·ªâ cho stable releases
    if ($script:NewVersion -notmatch "-") {
        New-ChangelogEntry $script:NewVersion $Type
    }
    
    Show-NextSteps $script:NewVersion
    
} catch {
    Write-ColoredOutput "‚ùå Error occurred: $($_.Exception.Message)" $Colors.Red
    Write-ColoredOutput "Stack trace: $($_.ScriptStackTrace)" $Colors.Gray
    exit 1
}